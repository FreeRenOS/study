#include <iostream>
#include <string>
#include <vector>

using namespace std;

vector<string> split(const string& s);
string::size_type width(const vector <string>& v);
vector<string> frame(const vector<string> & v);
vector<string> vcat(const vector<string>& top, const vector<string>& bottom);
vector<string> vcat2(const vector<string>& top, const vector<string>& bottom);
vector<string> vcat3(const vector<string>& top, const vector<string>& bottom);
vector<string> hcat(const vector<string>& left, const vector<string>& right);
vector<string> split2(const string& s);
bool is_palindrome(const string& s);


int main()
{
	string s;
	getline(cin, s);
	cout << endl << "output : " << endl;
	
	
	/*bool is_p = is_palindrome(s);
	string str_p = (is_p == true) ? "palindrome 앞뒤 같음" : "not_palindrome 앞뒤 다름";
	cout << s << " : " << str_p;*/

	vector <string> v_origin = split2(s);
	vector <string> v_output;
	v_output = frame(v_origin);
	v_output = hcat(v_origin, v_output);






	for (vector<string>::size_type i = 0; i != v_output.size(); i++) {
		cout << v_output[i] << endl;
	}


	return 0;
}

vector<string> split(const string& s)
{
	vector<string> ret;
	typedef string::size_type string_size;
	string_size i = 0;
	while (i != s.size()) {
		while (i != s.size() && isspace(s[i])) {
			//isspace 공백아닌 문자를 만날때까지 i 증가
			i++;
		}

		string_size j = i; // 공백이 아닌 첫글자 위치j에 저장
		while (j != s.size() && !isspace(s[j])) {
			// !isspace 공백을 만날때까지 j 증가
			j++;
		}

		if (i != j) {
			//i에서 부터 j-i 개의 문자들을 s에 복사
			ret.push_back(s.substr(i, j - i));
				i = j; 
		}


	}

	return ret;
}




string::size_type width(const vector <string>& v)
{
	string::size_type maxlen = 0;
	for (vector<string>::size_type i = 0; i != v.size(); i++)
	{
		maxlen = maxlen > v[i].size() ? maxlen : v[i].size();
		//maxlen = max(maxlen, v[i].size());
	}

	return maxlen;
}

////인덱스 이용 프레임
//vector<string> frame(const vector<string>& v) 
//{
//	vector<string> ret;
//	string::size_type maxlen = width(v);
//	string border(maxlen + 4, '*');
//	ret.push_back(border);
//
//	for (vector<string>::size_type i = 0; i != v.size(); i++)
//	{
//		ret.push_back("* " + v[i] + string(maxlen - v[i].size(), ' ')+" *");
//	}
//
//		ret.push_back(border);
//
//	return ret;
//}

//반복자 이용 프레임
vector<string> frame(const vector<string>& v)
{
	vector<string> ret;
	string::size_type maxlen = width(v);
	string border(maxlen + 4, '*');
	ret.push_back(border);

	for (vector<string>::const_iterator iter = v.begin(); iter != v.end(); iter++)
	{
		ret.push_back("* " + *iter + string(maxlen - iter->size(), ' ') + " *");
	}

	ret.push_back(border);

	return ret;
}



//수직결합
vector<string> vcat(const vector<string>& top, const vector<string>& bottom)
{
	vector<string> ret = top;

	for (vector<string>::const_iterator it = bottom.begin(); it != bottom.end(); it++)
	{
		ret.push_back(*it);
	}
	return ret;
}

////수평 결합
//vector<string> hcat(const vector<string>& left, const vector<string>& right)
//{
//	vector<string> ret;
//	//두 문자 그림사이에 공백 하나를 남김
//	string::size_type width1 = width(left) + 1;
//
//	//왼쪽과 오른쪽 요소를 살피는 인덱스
//	vector<string>::size_type i = 0, j = 0;
//	
//	//모든행 살핌
//	while (i != left.size() || j != right.size()) {
//		string s;
//		//왼쪽문자 행 복사해서 넣기
//		if (i != left.size())
//			s = left[i++];
//		//공백 추가
//		s += string(width1 - s.size(), ' ');
//
//		//오른쪽 문자 행 복사해서 추가
//		if (j != right.size())
//			s += right[j++];
//
//		//새로운 문자에 문자열 넣기
//		ret.push_back(s);
//	}
//	
//	return ret;
//}


//수평 결합
vector<string> hcat(const vector<string>& left, const vector<string>& right)
{
	vector<string> ret;
	//두 문자 그림사이에 공백 하나를 남김
	string::size_type width1 = width(left) + 1;

	//왼쪽과 오른쪽 요소를 살피는 인덱스
	vector<string>::const_iterator i = left.begin() , j = right.begin();

	//모든행 살핌
	while (i != left.end() || j != right.end()) {
		string s;
		//왼쪽문자 행 복사해서 넣기
		if (i != left.end())
			s = left[*i++];
		//공백 추가
		s += string(width1 - s.size(), ' ');

		//오른쪽 문자 행 복사해서 추가
		if (j != right.size())
			s += right[j++];

		//새로운 문자에 문자열 넣기
		ret.push_back(s);
	}

	return ret;
}


vector<string> vcat2(const vector<string>& top, const vector<string>& bottom)
{
	vector<string> ret = top;

	ret.insert(ret.end(), bottom.begin(), bottom.end());


	return ret;
}

// copy (begin, end, out(넣을곳));
vector<string> vcat3(const vector<string>& top, const vector<string>& bottom)
{
	vector<string> ret = top;

	copy(bottom.begin(), bottom.end(), back_inserter(ret));


	return ret;
}


bool space(char c)
{
	return isspace(c);
}

bool not_space(char c)
{
	return !isspace(c);
}


vector<string> split2(const string& s)
{
	typedef string::const_iterator iter;
	vector <string> ret;
	
	iter i = s.begin();
	while (i != s.end()) {
		i = find_if(i, s.end(), not_space);
		iter j = find_if(i, s.end(), space);
		
		if(i!=s.end()){
			ret.push_back(string(i, j));
		}
		i = j;
	}
	return ret;
}

bool is_palindrome(const string& s) {
	return equal(s.begin(), s.end(), s.rbegin());
}

