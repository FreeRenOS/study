#include <opencv2/opencv.hpp>
#include <iostream>

using namespace cv;
using namespace std;


int main()
{
	Mat img_src, img_gray, img_dst;

	//절대경로
	//string filename = "C:\\Users\\w\\source\\repos\\OpenCvtest\\OpenCvtest\\Images\\whitebutterfly.jpg";
	string filename = "images/whitebutterfly.jpg"; //루트 경로

	img_src = imread(filename, IMREAD_COLOR);


	if (img_src.empty())
	{
		cout << "이미지 파일을 읽을 수 없습니다." << endl;
		return -1;
	}

	for (int i = 0; i < 1; i++)
		pyrDown(img_src, img_src); //이미지 사이즈 1/2로 줄임

	int width = img_src.cols;
	int height = img_src.rows;
	//-----------------------------------------------------------

	cvtColor(img_src, img_gray, COLOR_BGR2GRAY);

	//threshold(img_gray, img_dst, 140, 255, THRESH_BINARY);
	//threshold(img_gray, img_dst, 140, 255, THRESH_OTSU);
	//THRESH_BINARY : 임계값 이상 = 최대값, 임계값 이하 = 0
	//THRESH_BINARY_INV : 임계값 이상 = 0 , 임계값 이하 = 최대값
	//THRESH_TRUNC : 임계값 이상 = 최대값 , 임계값 이하는 =원본값
	//THRESH_TOZERO : 임계값 이상 = 원본값, 임계값 이하 = 0
	//THRESH_TOZERO_INV : 임계값 이상 =0 , 임계값 이하 = 원본값
	//THRESH_OTSU : Otsu  알고리즘 적용
	//THRESH_TRIANGLE : Triangle 알고리즘 적용

	threshold(img_gray, img_dst, 128, 255, THRESH_TOZERO);



	
	namedWindow("Color");

	imshow("Color", img_src);
	imshow("dst", img_dst);


	waitKey(0);
	destroyAllWindows();

	return 0;
}